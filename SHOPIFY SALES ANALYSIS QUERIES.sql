CREATE DATABASE SHOPIFY_DB

USE SHOPIFY_DB

CREATE TABLE SALES (
Admin_Graphql_Api_Id VARCHAR(36),
 Order_Number INT,
 Billing_Address_Country VARCHAR(23),
 Billing_Address_First_Name	VARCHAR(26),
 Billing_Address_Last_Name VARCHAR(25),
 Billing_Address_Province VARCHAR(24),
 Billing_Address_Zip INT ,
 CITY VARCHAR(25),
 Currency VARCHAR(3),
 Customer_Id BIGINT,
 Invoice_Date VARCHAR(16),
 Gateway VARCHAR(16),
 Product_Id VARCHAR(13),
 Product_Type VARCHAR(14),
 Variant_Id VARCHAR(14),
 Quantity INT ,
 Subtotal_Price DECIMAL(10,2),
 Total_Price_Usd DECIMAL(10,2),
 Total_Tax DECIMAL(10,2)
 );
 SET GLOBAL LOCAL_INFILE = ON ;
 LOAD DATA LOCAL INFILE 'C:/Users/HP/OneDrive/Desktop/DATA SOURCES/Shopify Sales Analysis/Shopify Sales.csv' INTO table SALES
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES;

-------SHOPIFY ANALYSIS QUERIES-----
----TRANSACTIONS KPIs----
1).TOTAL REVENUE GENERATED BEFORE TAX.
    SELECT SUM(Subtotal_price) from SALES
    
2).CUMMULATIVE NUMBER OF PRODUCTS SOLD.
SELECT SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD FROM SALES

3).How many unique orders have we processed?
    SELECT COUNT(ORDER_NUMBER) AS UNIQUE_ORDERS FROM SALES;
    
4).What is the Net average order value?
SELECT ROUND(AVG(SUBTOTAL_PRICE),2) AS AVERAGE_NET_ORDER_VALUE 
FROM SALES;

----CUSTOMER PURCHASE BEHAVIOUR KPIs----   

1).How many buyers do prevail?
    SELECT COUNT(DISTINCT(CUSTOMER_ID)) AS TOTAL_CUSTOMERS 
    FROM SALES;
    
 2).HOW MANY SINGLE ORDER CUSTOMERS DO PREVAIL?
	
SELECT COUNT(*) AS single_order_customers
FROM (
    SELECT Customer_id
    FROM sales
    GROUP BY Customer_id
    HAVING COUNT(order_number) = 1 ) AS one_time_customers;
    

 4).Average Revenue per Customer ?
    SELECT ROUND(SUM(TOTAL_PRICE_USD)/COUNT(DISTINCT CUSTOMER_ID),2) AS AVERAGE_REVENUE_PER_CUSTOMER
     FROM SALES; 
     
---OTHER KEY PROBLEMS---
PRODUCT BASED :
1).Daily Sales Trend per Product?
   SELECT DATE_FORMAT(INVOICE_DATE,'%Y-%m-%d') as SALE_DAY,
   PRODUCT_TYPE,
   SUM(QUANTITY) AS QUANTITIES
   FROM SALES
   GROUP BY PRODUCT_TYPE
   ORDER BY SALE_DAY;

2).Products with highest taxed Provinces:
   SELECT PRODUCT_TYPE,
   Billing_Address_Province,
   SUM(TOTAL_TAX) AS TAX_LEVIED
   FROM SALES
   GROUP BY PRODUCT_TYPE
   ORDER BY TAX_LEVIED DESC;

 3).Number of repeat purchases per product ?
    SELECT 
    PRODUCT_TYPE,
    COUNT(DISTINCT CUSTOMER_ID) AS REPEAT_PURCHASES
FROM SALES
WHERE CUSTOMER_ID IN (
    SELECT CUSTOMER_ID 
    FROM SALES 
    GROUP BY CUSTOMER_ID
    HAVING COUNT(DISTINCT ORDER_NUMBER) > 1
)
GROUP BY PRODUCT_TYPE
ORDER BY REPEAT_PURCHASES DESC;

   
4)Product Performance by Payment Gateway
SELECT 
    PRODUCT_TYPE,
    GATEWAY,
    SUM(TOTAL_PRICE_USD) AS TOTAL_SALES
FROM SALES
GROUP BY GATEWAY,PRODUCT_TYPE
ORDER BY TOTAL_SALES DESC;
--------------------------------------------------------------------------
GEOGRAPHY BASED:
1).How is revenue distributed by  CITY/state?
	SELECT CITY,
    SUM(TOTAL_PRICE_USD) AS REVENUE_DISTRIBUTION
    FROM SALES
    GROUP BY CITY
    ORDER BY REVENUE_DISTRIBUTION DESC;
 
 2)Average Revenue in Province per Customer.
SELECT 
    BILLING_ADDRESS_PROVINCE,
    ROUND(SUM(TOTAL_PRICE_USD) / COUNT(DISTINCT CUSTOMER_ID), 2) AS AVG_REVENUE_PER_CUSTOMER
FROM SALES
GROUP BY BILLING_ADDRESS_PROVINCE;
      
3).What is the average order value by city?
   SELECT 
   CITY, ROUND(SUM(Total_Price_USD) / COUNT(DISTINCT Order_Number), 2) AS Average_Order_Value
FROM Sales
GROUP BY CITY
ORDER BY Average_Order_Value DESC;

   
4).Tax Collection Trend per Province.
SELECT 
    BILLING_ADDRESS_PROVINCE,
     DAY(INVOICE_DATE) AS DAYS ,
    SUM(TOTAL_TAX) AS TOTAL_TAX_COLLECTED
FROM SALES
GROUP BY BILLING_ADDRESS_PROVINCE, days
ORDER BY DAYS;
-------
 CUSTOMER BASED:   
1).Who are the top 1 customers by lifetime Net Sales?
    SELECT CUSTOMER_ID, 
    SUM(QUANTITY) AS TOTAL_QUANTITY,
    SUM(SUBTOTAL_PRICE) AS NET_SALES 
    FROM SALES 
    GROUP BY CUSTOMER_ID
    ORDER BY NET_SALES DESC , TOTAL_QUANTITY DESC
    LIMIT 1;
 
2).CUSTOMERS with highest Repeat Order Time Gaps .
    SELECT 
    Customer_id,
    DATEDIFF(MAX(INVOICE_DATE), MIN(INVOICE_DATE)) AS DAYS_BETWEEN_FIRST_LAST_ORDER
FROM SALES
GROUP BY Customer_id
HAVING DAYS_BETWEEN_FIRST_LAST_ORDER >=5
;

3). What share of Net Sales is generated by Repeat Customers?
    SELECT ROUND(100*
                  (
                  SELECT SUM(SUBTOTAL_PRICE) 
				  FROM SALES
				  WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID
									FROM SALES
                                    GROUP BY CUSTOMER_ID
                                    HAVING COUNT(ORDER_NUMBER)>1))
                                    / (SELECT SUM(SUBTOTAL_PRICE) FROM SALES),2) AS REPEAT_CUSTOMERS_SHARE;
                                    
    
4).How frequently do Repeat Customers place order?
       SELECT 
    ROUND(AVG(order_count), 2) AS avg_orders_per_repeat_customer
FROM (
    SELECT 
        Customer_Id,
        COUNT(DISTINCT Order_Number) AS order_count   
    FROM sales
    GROUP BY Customer_Id
    HAVING COUNT(DISTINCT Order_Number) > 1          
) AS repeat_customers;

 -----------  
NET SALES BASED:
1).NET SALES BY DAYS?
   SELECT DAYNAME(INVOICE_DATE) AS DAYS, 
   SUM(SUBTOTAL_PRICE) AS NET_SALES
   FROM SALES 
   GROUP BY DAYS
   ORDER BY INVOICE_DATE ASC;
   
   
2).NET SALES BY PRODUCT CATEGORY?
   SELECT PRODUCT_TYPE ,
   SUM(SUBTOTAL_PRICE) AS NET_SALES
   FROM SALES
   GROUP BY PRODUCT_TYPE
   ORDER BY NET_SALES DESC;
   
3).Net Sales trend by City?   
   SELECT CITY,
   SUM(SUBTOTAL_PRICE) AS NET_SALES
   FROM SALES 
   GROUP BY CITY
   ORDER BY NET_SALES DESC;     

4).What is the share of Net Sales by repeat vs new customers?
    WITH CUSTOMER_ORDERS AS (
    SELECT CUSTOMER_ID,
    COUNT(ORDER_NUMBER) AS TOTAL_ORDERS
    FROM SALES 
    GROUP BY CUSTOMER_ID
    ),
    CUSTOMER_TYPE_LABELING AS (
    SELECT CUSTOMER_ID,
    CASE 
              WHEN TOTAL_ORDERS = 1 then "ONE TIME CUSTOMERS"
              ELSE "REPEAT CUSTOMERS"
              END AS CUSTOMERS_TYPE
              FROM CUSTOMER_ORDERS
              )
 SELECT CUSTOMERS_TYPE,
		ROUND(SUM(SUBTOTAL_PRICE),2) AS NET_SALES,
        ROUND(100*SUM(SUBTOTAL_PRICE)/(SELECT SUM(TOTAL_PRICE_USD) FROM SALES),2) AS NET_SALES_SHARE
        FROM SALES
        JOIN CUSTOMER_TYPE_LABELING ON sales.CUSTOMER_ID=customer_type_labeling.CUSTOMER_ID
        GROUP BY CUSTOMERS_TYPE
        order by net_sales desc;
       
        -----------------------------------------------------------------------------------------------------------------------
       

   

